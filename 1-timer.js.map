{"version":3,"file":"1-timer.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from 'flatpickr';\nimport 'flatpickr/dist/flatpickr.min.css';\nimport iziToast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.min.css';\n\nconst dateInput = document.getElementById('datetime-picker');\nconst startBtn = document.querySelector('[data-start]');\nconst daysEl = document.querySelector('[data-days]');\nconst hoursEl = document.querySelector('[data-hours]');\nconst minutesEl = document.querySelector('[data-minutes]');\nconst secondsEl = document.querySelector('[data-seconds]');\n\nlet timerId = null;\nlet selectedDate = null;\n\nstartBtn.disabled = true;\n\nflatpickr(dateInput, {\n    enableTime: true,\n    time_24hr: true,\n    defaultDate: new Date(),\n    minuteIncrement: 1,\n    onClose(selectedDates) {\n        if (selectedDates[0] <= new Date()) {\n            iziToast.info({\n                position: 'topRight', \n                message: 'Please choose a date in the future',\n            });\n            startBtn.disabled = true;\n        } else {\n            selectedDate = selectedDates[0];\n            startBtn.disabled = false;\n        }\n    },\n});\n\nstartBtn.addEventListener('click', () => {\n    timerId = setInterval(updateTimer, 1000);\n    startBtn.disabled = true;\n    dateInput.disabled = true;\n});\n\nfunction updateTimer() {\n    const diff = selectedDate - new Date();\n    if (diff <= 0) {\n        clearInterval(timerId);\n        dateInput.disabled = false;\n        startBtn.disabled = true;\n        updateDisplay(0, 0, 0, 0);\n        return;\n    }\n    const { days, hours, minutes, seconds } = convertMs(diff);\n    updateDisplay(days, hours, minutes, seconds);\n}\n\nfunction updateDisplay(days, hours, minutes, seconds) {\n    daysEl.textContent = addLeadingZero(days);\n    hoursEl.textContent = addLeadingZero(hours);\n    minutesEl.textContent = addLeadingZero(minutes);\n    secondsEl.textContent = addLeadingZero(seconds);\n}\n\nfunction addLeadingZero(value) {\n    return String(value).padStart(2, '0');\n}\n\nfunction convertMs(ms) {\n    const second = 1000;\n    const minute = second * 60;\n    const hour = minute * 60;\n    const day = hour * 24;\n    return {\n        days: Math.floor(ms / day),\n        hours: Math.floor((ms % day) / hour),\n        minutes: Math.floor(((ms % day) % hour) / minute),\n        seconds: Math.floor((((ms % day) % hour) % minute) / second),\n    };\n}\n"],"names":["dateInput","startBtn","daysEl","hoursEl","minutesEl","secondsEl","timerId","selectedDate","flatpickr","selectedDates","iziToast","updateTimer","diff","updateDisplay","days","hours","minutes","seconds","convertMs","addLeadingZero","value","ms"],"mappings":"2GAKA,MAAMA,EAAY,SAAS,eAAe,iBAAiB,EACrDC,EAAW,SAAS,cAAc,cAAc,EAChDC,EAAS,SAAS,cAAc,aAAa,EAC7CC,EAAU,SAAS,cAAc,cAAc,EAC/CC,EAAY,SAAS,cAAc,gBAAgB,EACnDC,EAAY,SAAS,cAAc,gBAAgB,EAEzD,IAAIC,EAAU,KACVC,EAAe,KAEnBN,EAAS,SAAW,GAEpBO,EAAUR,EAAW,CACjB,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQS,EAAe,CACfA,EAAc,CAAC,GAAK,IAAI,MACxBC,EAAS,KAAK,CACV,SAAU,WACV,QAAS,oCACzB,CAAa,EACDT,EAAS,SAAW,KAEpBM,EAAeE,EAAc,CAAC,EAC9BR,EAAS,SAAW,GAE3B,CACL,CAAC,EAEDA,EAAS,iBAAiB,QAAS,IAAM,CACrCK,EAAU,YAAYK,EAAa,GAAI,EACvCV,EAAS,SAAW,GACpBD,EAAU,SAAW,EACzB,CAAC,EAED,SAASW,GAAc,CACnB,MAAMC,EAAOL,EAAe,IAAI,KAChC,GAAIK,GAAQ,EAAG,CACX,cAAcN,CAAO,EACrBN,EAAU,SAAW,GACrBC,EAAS,SAAW,GACpBY,EAAc,EAAG,EAAG,EAAG,CAAC,EACxB,MACH,CACD,KAAM,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,GAAYC,EAAUN,CAAI,EACxDC,EAAcC,EAAMC,EAAOC,EAASC,CAAO,CAC/C,CAEA,SAASJ,EAAcC,EAAMC,EAAOC,EAASC,EAAS,CAClDf,EAAO,YAAciB,EAAeL,CAAI,EACxCX,EAAQ,YAAcgB,EAAeJ,CAAK,EAC1CX,EAAU,YAAce,EAAeH,CAAO,EAC9CX,EAAU,YAAcc,EAAeF,CAAO,CAClD,CAEA,SAASE,EAAeC,EAAO,CAC3B,OAAO,OAAOA,CAAK,EAAE,SAAS,EAAG,GAAG,CACxC,CAEA,SAASF,EAAUG,EAAI,CAKnB,MAAO,CACH,KAAM,KAAK,MAAMA,EAAK,KAAG,EACzB,MAAO,KAAK,MAAOA,EAAK,MAAO,IAAI,EACnC,QAAS,KAAK,MAAQA,EAAK,MAAO,KAAQ,GAAM,EAChD,QAAS,KAAK,MAASA,EAAK,MAAO,KAAQ,IAAU,GAAM,CACnE,CACA"}